name: OpenAI Code Review on Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]


jobs:
  review_code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Send code to OpenAI for review
        id: openai_review
        run: |
          git fetch origin
          CODE_DIFF=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} --unified=0)
          ESCAPED_CONTENT=$(printf '%s' "$CODE_DIFF" | jq -Rs .)
          echo "ESCAPED_CONTENT: $ESCAPED_CONTENT"
          
          REVIEW_RESPONSE=$(jq -n \
                              --arg content "$ESCAPED_CONTENT" \
                              '{
                                  "model": "lmstudio-community/Meta-Llama-3.1-8B-Instruct-GGUF",
                                  "messages": [
                                      {
                                          "role": "system",
                                          "content": "Du bist Developer Security Experte und Developer Performance Experte. Analysiere den geänderten Sourcecode. Beschreibe ausführlich, was für Probleme du finden konntest die deine Schwerpunkte betreffen. Zeige zusätzlich einen Lösungsweg. Wenn du keine Probleme oder Auffälligkeiten gefunden hast, antworte ausschließlich exakt mit dem Text: Ich gebe den PR frei. Bei keinen ernsthaften Problemen, füge am Ende von deiner Antwort den exakt den Text: Ich gebe den PR frei. Wenn ernsthafte Schwierigkeiten entdeckt wurden, schreibe auf keinen Fall den Text: Ich gebe den PR frei. Antworte im Format GitHub Flavored Markdown (GFM) und halte die Antwort kurz. Antworte mir in deutsch."
                                      },
                                      {
                                          "role": "user",
                                          "content": $content
                                      }
                                  ],
                                  "temperature": 1,
                                  "max_tokens": 4096,
                                  "top_p": 1,
                                  "frequency_penalty": 0,
                                  "presence_penalty": 0
                              }' | \
          curl -X POST http://maiki.dns.army:1234/v1/chat/completions \
               -H "Content-Type: application/json" \
               -d @-)
          
          REVIEW_MESSAGE=$(echo $REVIEW_RESPONSE | jq -r .choices[0].message.content)
          REVIEW_MESSAGE_ESCAPED=$(echo "$REVIEW_MESSAGE" | sed ':a;N;$!ba;s/\n/__NEWLINE__/g')
          echo "REVIEW_MESSAGE=$REVIEW_MESSAGE_ESCAPED" >> $GITHUB_ENV
          if [ -z "$REVIEW_MESSAGE" ]; then
            REVIEW_MESSAGE="Es gab ein Problem bei der Überprüfung des Codes durch AI. Bitte überprüfen Sie manuell."
          fi

      - name: Comment on PR with OpenAI's review
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            let reviewMessage = process.env.REVIEW_MESSAGE;
            reviewMessage = reviewMessage.split('__NEWLINE__').join('\n');
            await github.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reviewMessage
            });

      - name: Assign PR to MaikPeters1511 if review is positive
        if: contains(env.REVIEW_MESSAGE, 'Ich gebe den PR frei')
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            await github.issues.addAssignees({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              assignees: ['MaikPeters1511']
            });

      - name: Fail if review is not positive
        if: ${{ !contains(env.REVIEW_MESSAGE, 'Ich gebe den PR frei') }}
        run: |
          echo "Review nicht bestanden. Der Merge des Pull Requests wird verhindert."
          exit 1

    # - name: Merge PR if review is positive
    #   if: contains(env.REVIEW_MESSAGE, 'Ich gebe den PR frei') # Adjust this condition based on OpenAI's typical positive responses
    #   uses: actions/github-script@v3
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const prNumber = context.payload.pull_request.number;
    #       await github.pulls.merge({
    #         pull_number: prNumber,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo
    #       });

    # - name: Trigger Repository Dispatch
    #   if: contains(env.REVIEW_MESSAGE, 'Ich gebe den PR frei')
    #   uses: actions/github-script@v3
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const pr = await github.pulls.get({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         pull_number: context.payload.pull_request.number
    #       });
    #       const lastCommitSha = pr.data.head.sha;
    #       await github.repos.createDispatchEvent({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         event_type: 'pull_request_merged',
    #         client_payload: {
    #           pr_number: context.payload.pull_request.number,
    #           last_commit_sha: lastCommitSha
    #         }
    #       });

